services:
  frontend:
    build:
      context: ./frontend
      dockerfile: development.Dockerfile
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./frontend:/app
    ports:
      - "3000:3000"
    environment:
      - BACKEND_URL=http://backend:3000
    networks:
      - default
      - back-front
    healthcheck:
        test: [ "CMD", "wget", "--spider", "http://frontend:3000/" ]
        interval: 30s
        timeout: 10s
        retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: development.Dockerfile
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - ./backend:/app
    ports:
      - "8000:3000"
    environment:
      - DB_TYPE=postgres
      - DB_HOST=database
      - DB_PORT=6432
      - DB_DATABASE=${DATABASE_NAME}
      - DB_USERNAME=${DATABASE_USERNAME}
      - DB_PASSWORD=${DATABASE_PASSWORD}
    networks:
      - back-front
      - db-back
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://backend:3000/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  database:
    image: bitnami/postgresql:latest
    restart: unless-stopped
    volumes:
      - database_volume:/bitnami/postgresql
    environment:
      - POSTGRESQL_USERNAME=${DATABASE_USERNAME}
      - POSTGRESQL_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRESQL_DATABASE=${DATABASE_NAME}
      - POSTGRESQL_PORT_NUMBER=6432
    networks:
      - db-back
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME} -p 6432" ]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
    default:
    back-front:
    db-back:

volumes:
  database_volume: