services:
  frontend:
    build:
      context: ./frontend
      dockerfile: development.Dockerfile
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./frontend:/app
    ports:
      - "3001:3000"
    environment:
      - BACKEND_URL=http://backend:3000
    networks:
      - default
      - back-front
    healthcheck:
        test: [ "CMD", "wget", "--spider", "http://frontend:3000/" ]
        interval: 30s
        timeout: 10s
        retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: development.Dockerfile
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - ./backend:/app
    environment:
      - DB_TYPE=mongodb
      - DB_HOST=database
      - DB_PORT=27017
      - DB_DATABASE=${DATABASE_NAME}
      - DB_USERNAME=${DATABASE_USERNAME}
      - DB_PASSWORD=${DATABASE_PASSWORD}
    networks:
      - back-front
      - db-back
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://backend:3000/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  database:
    image: mongo
    restart: unless-stopped
    volumes:
      - database_volume:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${DATABASE_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${DATABASE_PASSWORD}
      - MONGO_INITDB_DATABASE=${DATABASE_NAME}
    networks:
      - db-back
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
    default:
    back-front:
    db-back:

volumes:
  database_volume: